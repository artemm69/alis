# импортируем библиотеки
from flask import Flask, request, jsonify
import logging

# создаём приложение
# мы передаём __name__, в нём содержится информация,
# в каком модуле мы находимся.
# В данном случае там содержится '__main__',
# так как мы обращаемся к переменной из запущенного модуля.
# если бы такое обращение, например, произошло внутри модуля logging,
# то мы бы получили 'logging'
app = Flask(__name__)

# Устанавливаем уровень логирования
logging.basicConfig(level=logging.INFO)

# Создадим словарь, чтобы для каждой сессии общения
# с навыком хранились подсказки, которые видел пользователь.
# Это поможет нам немного разнообразить подсказки ответов
# (buttons в JSON ответа).
# Когда новый пользователь напишет нашему навыку,
# то мы сохраним в этот словарь запись формата
# sessionStorage[user_id] = {'suggests': ["Не хочу.", "Не буду.", "Отстань!" ]}
# Такая запись говорит, что мы показали пользователю эти три подсказки.
# Когда он откажется купить слона,
# то мы уберем одну подсказку. Как будто что-то меняется :)
sessionStorage = {}


@app.route('/post', methods=['POST'])
# Функция получает тело запроса и возвращает ответ.
# Внутри функции доступен request.json - это JSON,
# который отправила нам Алиса в запросе POST
def main():
    logging.info(f'Request: {request.json!r}')

    # Начинаем формировать ответ, согласно документации
    # мы собираем словарь, который потом отдадим Алисе
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        }
    }

    # Отправляем request.json и response в функцию handle_dialog.
    # Она сформирует оставшиеся поля JSON, которые отвечают
    # непосредственно за ведение диалога
    handle_dialog(request.json, response)

    logging.info(f'Response:  {response!r}')

    # Преобразовываем в JSON и возвращаем
    return jsonify(response)


def handle_dialog(req, res):
    user_id = req['session']['user_id']

    if req['session']['new']:
        # Это новый пользователь.
        # Инициализируем сессию и поприветствуем его.
        # Запишем подсказки, которые мы ему покажем в первый раз

        sessionStorage[user_id] = {
            'suggests': [
                "Клик",
                "Улучшения",
                "Выход",
            ]
        }
        # Заполняем текст ответа
        res['response']['text'] = 'Привет! Это обычное яйцо. Что в нём такого? Но погодите..кажется в нём кто-то есть! Давайте поможем маленькому утёнку выбраться из этого яичка. Для того, чтобы наносить удары по яйцу, нужно нажать на кнопку "клик".'
        score.reset_value()
        # Получим подсказки
        res['response']['buttons'] = get_suggests(user_id)
        return

    # Сюда дойдем только, если пользователь не новый,
    # и разговор с Алисой уже был начат
    # Обрабатываем ответ пользователя.
    # В req['request']['original_utterance'] лежит весь текст,
    # что нам прислал пользователь
    # Если он написал 'ладно', 'куплю', 'покупаю', 'хорошо',
    # то мы считаем, что пользователь согласился.
    # Подумайте, всё ли в этом фрагменте написано "красиво"?
    if req['request']['original_utterance'].lower() in [
        'выход'
    ]:
        # Пользователь согласился, прощаемся.
        res['response']['text'] = 'Пока'
        res['response']['end_session'] = True

        return

    elif req['request']['original_utterance'].lower() in [

        'клик'

    ]:
        img = '1533899/000f7e0fbb0387387aa8'
        dop = "\n ЧТО ЖЕ ТАМ?"
        if score.get_value() <= 900 and score.get_value() > 800:
            img = '1533899/7ac82c459e80473fec5e'
            dop = "\n ПЕРВЫЕ ТРЕЩИНЫ"

        elif score.get_value() <= 800 and score.get_value() > 700:
            img = '1540737/a9ab859037db19b5f8d9'
            dop = "\n ТРЕЩИНЫ СТАНОВЯТСЯ БОЛЬШЕ"

        elif score.get_value() <= 700 and score.get_value() > 600:
            img = '1656841/8d5c606d2f2efbab3a84'
            dop = "\n КАЖЕТСЯ ТАМ ЧТО ТО ЕСТЬ!"

        elif score.get_value() <= 600 and score.get_value() > 400:
            img = '1533899/0d1eb5d091b78c8013b7'
            dop = "\n ЕГО УЖЕ ВИДНО!"

        elif score.get_value() <= 400 and score.get_value() > 100:
            img = '965417/9f5229e9cbde69a4831c'
            dop = "\n ДОБЕЙ ЭТУ СКОРЛУПУ!!!"

        elif score.get_value() <= 100 and score.get_value() > 0:
            img = '965417/d4c453dc4eaa1f0953fe'
            dop = "\n ЕЩЕ НЕМНОГО!!!!!!!!!!!"
        elif score.get_value() == 0:
            img = '1540737/3bd1c88353711b6524e0'
            dop = "\n ТЫ СПРАВИЛСЯ! ПОБЕДА!!! СПАСИБО ЗА ИГРУ!!!"
            res['response']['end_session'] = True

        res['response']['buttons'] = get_suggests(user_id)
        res['response']['card'] = {}
        res['response']['card']['type'] = 'BigImage'
        res['response']['card'][
            'title'] = f"HP яйца: {score.new_value()}" + dop
        res['response']['card']['image_id'] = img
        res['response']['text'] = 'Тогда сыграем!'

    elif req['request']['original_utterance'].lower() in [

        'улучшения'

    ]:
        lv1 = 'закрыто'
        lv2 = 'закрыто'
        lv3 = 'закрыто'
        if score.get_value() <= 950 and score.get_value() > 850:
            lv1 = 'открыто'
        if score.get_value() <= 850 and score.get_value() > 650:
            lv2 = 'открыто'
        if score.get_value() <= 650 and score.get_value() >= 0:
            lv3 = 'открыто'

        res['response']['buttons'] = get_suggests(user_id)
        res['response'][
            'text'] = f'Доступные улучшения: \n 1) урон каждого клика - 2 [{lv1}] \n 2) урон каждого клика - 4 [{lv2}] \n 3) урон каждого клика - 8 [{lv3}]'


# Функция возвращает две подсказки для ответа.
def get_suggests(user_id):
    session = sessionStorage[user_id]

    # Выбираем две первые подсказки из массива.
    suggests = [
        {'title': suggest, 'hide': True}
        for suggest in session['suggests']
    ]

    return suggests


class Phoneone:
    def __init__(self):
        self._value = 1000

    def new_value(self):
        if self._value > 0:
            if score.get_value() <= 950 and score.get_value() > 850:
                self._value -= 10
                return self._value
            elif score.get_value() <= 850 and score.get_value() > 650:
                self._value -= 50
                return self._value
            elif score.get_value() <= 650 and score.get_value() > 0 and score.get_value() != 2:
                self._value -= 8
                return self._value
            elif score.get_value() > 950:
                self._value -= 1
                return self._value
            elif score.get_value() == 2:
                self._value -= 2
                return self._value
        else:
            return 0

    def reset_value(self):
        self._value = 1000

    def get_value(self):
        return self._value


score = Phoneone()

if __name__ == '__main__':
    app.run()
